/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;

import java.io.IOException;
import java.lang.*;

public class App {
    private static final FileHandler handler = new FileHandler();
    public App() {

    }

    // Check if the username and password arguments are provided
    private static boolean checkCredentials(String[] args) {
        if (args.length < 2 || !args[1].contains("-u")) {
            System.out.println("{'status':'error','message':'You need to be authenticated'}");
            return false;
        } else if (args.length < 3 || !args[2].contains("-p")) {
            System.out.println("{'status':'error','message':'You need to be authenticated'}");
            return false;
        }
        return true;
    }

    private void cleanup() {
        handler.cleanAll();
        System.out.println("{'status':'ok','message':'Cleanup finished successfully'}");
    }

    private void createUser(String[] args) {
        if (args.length < 2) {
            System.out.println("{'status':'error','message':'Please provide username'}");
            return;
        } else if (args.length < 3) {
            System.out.println("{'status':'error','message':'Please provide password'}");
            return;
        }

        User user = new User(args);

        // Check if the user exists in the users.txt file
        if (user.userExists()) {
            System.out.println("{'status':'error','message':'User already exists'}");
            return;
        }

        if (user.logUser()) {
            System.out.println("{'status':'ok','message':'User created successfully'}");
        }
    }

    private void createPost(String[] args) {
        Post post = new Post(args);

        // check if the text for the post is provided
        if (args.length < 4) {
            System.out.println("{'status':'error','message':'No text provided'}");
            return;
        } else if (post.text.length() > 300) {
            System.out.println("{'status':'error','message':'Post text length exceeded'}");
            return;
        }

        if (post.logPost()) {
            System.out.println("{'status':'ok','message':'Post added successfully'}");
        }
    }

    private void deletePost(String[] args) {
        // check if the id parameter is passed
        if (args.length != 4) {
            System.out.println("{'status':'error','message':'No identifier was provided'}");
        }

        Post post = new Post(args);

        if (post.delete()) {
            System.out.println("{'status':'ok','message':'Post deleted successfully'}");
        }
    }

    private void followUser(String[] args) {
        User user = new User(args);

        // check if the username to follow is provided
        if (args.length != 4) {
            System.out.println("{'status':'error','message':'No username to follow was provided'}");
            return;
        } else if (!handler.checkUser(args[3].split(" ")[1])) { // check if the user to follow exists
            System.out.println("{'status':'error','message':'The username to follow was not valid'}");
            return;
        }

        /*
          Logic of the following part:

                (follows)
          User1 --------> User2   (1)
                (is followed by)
          User2 <--------------- User1 (2)

          User1 follows User2, and we have relationship (1). That is implemented with
          follow(String usernameToFollow) method in the User class. Giving this, the
          User2 gains a follower, and we have the relationship (2). This is implemented
          with addFollower(String followerName) method in the User class.

         */

        if (user.follow(user.get4thArg(args))) { // add follow to current user in following.txt file
            // add this user in the follow list of the followed user (in followers.txt)
            if (user.addFollower(user.get4thArg(args))) {
                System.out.println("{'status':'ok','message':'Operation executed successfully'}");
            }
        }
    }

    private void unfollowUser(String[] args) {
        User user = new User(args);

        if (args.length != 4) {
            System.out.println("{'status':'error','message':'No username to unfollow was provided'}");
            return;
        } else if (!handler.checkUser(args[3].split(" ")[1])) {
            System.out.println("{'status':'error','message':'The username to unfollow was not valid'}");
            return;
        }

        String userToUnfollow = user.get4thArg(args);

        try {
            if (user.unfollow(user.username, userToUnfollow, FileHandler.followingLog)) {
                System.out.println("{'status':'ok','message':'Operation executed successfully'}");
                user.unfollow(userToUnfollow, user.username, FileHandler.followersLog);
            }
        } catch (IOException ignored) {

        }
    }

    private void printFollowList(String[] followList) {
        System.out.print("{'status':'ok','message': [");
        for (int i = 0; i < followList.length; i++) {
            System.out.print(followList[i]);
            if (i != followList.length - 1) {
                System.out.print(", ");
            }
        }
        System.out.println("]}");
    }

    private void listFollowers(String[] args) {
        User user = new User(args);

        if (args.length != 4) {
            System.out.println("{'status':'error','message':'No username to list followers was provided'}");
            return;
        } else if (!handler.checkUser(args[3].split(" ")[1])) {
            System.out.println("{'status':'error','message':'The username to list followers was not valid'}");
            return;
        }

        String[] followers = user.getFollowers(user.get4thArg(args));
        printFollowList(followers);
    }

    private void listFollowings(String[] args) {
        User user = new User(args);

        String[] following = user.getFollowing(user.username);
        printFollowList(following);
    }

    private void likePost(String[] args) {
        Post post = new Post(args);
        int id;
        try {
            id = post.getId(args);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("{'status':'error','message':'No post identifier to like was provided'}");
            return;
        }

        User user = new User(args);

        if (handler.postExists(id) && handler.postValidForLike(user, id)) {
            post.like(id); // add like to post
            user.like(id); // add liked post id to user file
            System.out.println("{'status':'ok','message':'Operation executed successfully'}");
        } else {
            System.out.println("{'status':'error','message':'The post identifier to like was not valid'}");
        }
    }

    private void unlikePost(String[] args) {
        Post post = new Post(args);
        int id;
        try {
            id = post.getId(args);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("{'status':'error','message':'No post identifier to unlike was provided'}");
            return;
        }

        User user = new User(args);

        if (handler.postExists(id) && handler.postValidForUnlike(user, id)) {
            post.unlike(id); // remove like from post
            user.unlike(id); // remove liked post id from user file
            System.out.println("{'status':'ok','message':'Operation executed successfully'}");
        } else {
            System.out.println("{'status':'error','message':'The post identifier to unlike was not valid'}");
        }
    }

    private void commentPost(String[] args) {
        Comment com = new Comment(args);
        try {
            com.text = com.getText(args);
            com.postID = com.getPostID(args);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("{'status':'error','message':'No text provided'}");
            return;
        }

        if (com.text.length() > 300) {
            System.out.println("{'status':'error','message':'Comment text length exceeded'}");
            return;
        }

        if (com.logComment()) {
            System.out.println("{'status':'ok','message':'Comment added successfully'}");
        }
    }

    private void deleteComment(String[] args) {
        if (args.length != 4) {
            System.out.println("{'status':'error','message':'No identifier was provided'}");
            return;
        }

        Comment comment = new Comment(args);

        if (comment.delete()) {
            System.out.println("{'status':'ok','message':'Comment deleted successfully'}");
        }
    }

    public static void main(String[] strings) {
        if (strings == null || strings.length == 0) {
            System.out.print("Hello world!");
            return;
        }

        if (!strings[0].equals("-cleanup-all") && !strings[0].equals("-create-user")) {
            if (!checkCredentials(strings)) {
                return;
            }

            String username = User.getUsername(strings);
            String password = User.getPassword(strings);

            if (!handler.validPasswordAndUser(username, password)) {
                System.out.println("{'status':'error','message':'Login failed'}");
                return;
            }
        }

        App app = new App();

        switch (strings[0]) {
            case "-cleanup-all": app.cleanup(); break;
            case "-create-user": app.createUser(strings); break;
            case "-create-post": app.createPost(strings); break;
            case "-delete-post-by-id": app.deletePost(strings); break;
            case "-follow-user-by-username": app.followUser(strings); break;
            case "-unfollow-user-by-username": app.unfollowUser(strings); break;
            case "-get-followers": app.listFollowers(strings); break;
            case "-get-following": app.listFollowings(strings); break;
            case "-like-post": app.likePost(strings); break;
            case "-unlike-post": app.unlikePost(strings); break;
            case "-comment-post": app.commentPost(strings); break;
            case "-delete-comment-by-id": app.deleteComment(strings); break;
        }
    }
}
